{"ast":null,"code":"import apiClient from'../api/client';import{API_ENDPOINTS}from'../api/endpoints';class SignatureService{// Tạo cặp khóa Dilithium\nasync generateKeypair(){try{const response=await apiClient.post(API_ENDPOINTS.GENERATE_KEYPAIR);return response.data;}catch(error){throw this.handleError(error);}}// Ký tin nhắn\nasync signMessage(signatureData){try{const response=await apiClient.post(API_ENDPOINTS.SIGN_MESSAGE,signatureData);return response.data;}catch(error){throw this.handleError(error);}}// Xác minh chữ ký\nasync verifySignature(verificationData){try{const response=await apiClient.post(API_ENDPOINTS.VERIFY_SIGNATURE,verificationData);return response.data;}catch(error){throw this.handleError(error);}}// Lấy log chữ ký\nasync getSignatureLogs(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await apiClient.get(API_ENDPOINTS.SIGNATURE_LOGS,{params});return response.data;}catch(error){throw this.handleError(error);}}// Lấy thống kê chữ ký\nasync getSignatureStats(){try{const response=await apiClient.get(\"\".concat(API_ENDPOINTS.SIGNATURE_LOGS,\"stats/\"));return response.data;}catch(error){throw this.handleError(error);}}// Lấy Certificate Authorities\nasync getCertificateAuthorities(){try{const response=await apiClient.get(API_ENDPOINTS.CERTIFICATE_AUTHORITIES);return response.data;}catch(error){throw this.handleError(error);}}// Lấy CA hỗ trợ quantum-safe\nasync getQuantumSafeCAs(){try{const response=await apiClient.get(\"\".concat(API_ENDPOINTS.CERTIFICATE_AUTHORITIES,\"quantum_safe/\"));return response.data;}catch(error){throw this.handleError(error);}}// Ký đơn hàng (buyer)\nasync signOrder(orderId,message,privateKey){try{const signatureData={entity_type:'order',entity_id:orderId,message:message,private_key:privateKey};return await this.signMessage(signatureData);}catch(error){throw this.handleError(error);}}// Ký thanh toán\nasync signPayment(paymentId,message,privateKey){try{const signatureData={entity_type:'payment',entity_id:paymentId,message:message,private_key:privateKey};return await this.signMessage(signatureData);}catch(error){throw this.handleError(error);}}handleError(error){var _error$response;if((_error$response=error.response)!==null&&_error$response!==void 0&&_error$response.data){return{message:error.response.data.message||'Có lỗi xảy ra',errors:error.response.data.errors||{},status:error.response.status};}return{message:'Lỗi kết nối mạng',errors:{},status:0};}}const signatureService=new SignatureService();export default signatureService;","map":{"version":3,"names":["apiClient","API_ENDPOINTS","SignatureService","generateKeypair","response","post","GENERATE_KEYPAIR","data","error","handleError","signMessage","signatureData","SIGN_MESSAGE","verifySignature","verificationData","VERIFY_SIGNATURE","getSignatureLogs","params","arguments","length","undefined","get","SIGNATURE_LOGS","getSignatureStats","concat","getCertificateAuthorities","CERTIFICATE_AUTHORITIES","getQuantumSafeCAs","signOrder","orderId","message","privateKey","entity_type","entity_id","private_key","signPayment","paymentId","_error$response","errors","status","signatureService"],"sources":["D:/BaitapUIT/Mat_Ma_Hoc/new_final_project_clone/quantum-e-commerce/FE/src/services/signatureService.js"],"sourcesContent":["import apiClient from '../api/client';\r\nimport { API_ENDPOINTS } from '../api/endpoints';\r\n\r\nclass SignatureService {\r\n  // Tạo cặp khóa Dilithium\r\n  async generateKeypair() {\r\n    try {\r\n      const response = await apiClient.post(API_ENDPOINTS.GENERATE_KEYPAIR);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Ký tin nhắn\r\n  async signMessage(signatureData) {\r\n    try {\r\n      const response = await apiClient.post(API_ENDPOINTS.SIGN_MESSAGE, signatureData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xác minh chữ ký\r\n  async verifySignature(verificationData) {\r\n    try {\r\n      const response = await apiClient.post(API_ENDPOINTS.VERIFY_SIGNATURE, verificationData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy log chữ ký\r\n  async getSignatureLogs(params = {}) {\r\n    try {\r\n      const response = await apiClient.get(API_ENDPOINTS.SIGNATURE_LOGS, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy thống kê chữ ký\r\n  async getSignatureStats() {\r\n    try {\r\n      const response = await apiClient.get(`${API_ENDPOINTS.SIGNATURE_LOGS}stats/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy Certificate Authorities\r\n  async getCertificateAuthorities() {\r\n    try {\r\n      const response = await apiClient.get(API_ENDPOINTS.CERTIFICATE_AUTHORITIES);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy CA hỗ trợ quantum-safe\r\n  async getQuantumSafeCAs() {\r\n    try {\r\n      const response = await apiClient.get(`${API_ENDPOINTS.CERTIFICATE_AUTHORITIES}quantum_safe/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Ký đơn hàng (buyer)\r\n  async signOrder(orderId, message, privateKey) {\r\n    try {\r\n      const signatureData = {\r\n        entity_type: 'order',\r\n        entity_id: orderId,\r\n        message: message,\r\n        private_key: privateKey\r\n      };\r\n      return await this.signMessage(signatureData);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Ký thanh toán\r\n  async signPayment(paymentId, message, privateKey) {\r\n    try {\r\n      const signatureData = {\r\n        entity_type: 'payment',\r\n        entity_id: paymentId,\r\n        message: message,\r\n        private_key: privateKey\r\n      };\r\n      return await this.signMessage(signatureData);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  handleError(error) {\r\n    if (error.response?.data) {\r\n      return {\r\n        message: error.response.data.message || 'Có lỗi xảy ra',\r\n        errors: error.response.data.errors || {},\r\n        status: error.response.status\r\n      };\r\n    }\r\n    return { message: 'Lỗi kết nối mạng', errors: {}, status: 0 };\r\n  }\r\n}\r\n\r\nconst signatureService = new SignatureService();\r\nexport default signatureService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}