{"ast":null,"code":"// src/pages/Profile/ProfilePage.jsx\n\n// ... (các hàm và useEffect khác giữ nguyên)\n\nconst handleGenerateSignature = async () => {\n  // Hiển thị thông báo xác nhận để người dùng hiểu tầm quan trọng\n  if (!window.confirm('Bạn sắp tạo một cặp khóa chữ ký số mới. Khóa bí mật sẽ được lưu trên trình duyệt này. Bạn có muốn tiếp tục?')) {\n    return;\n  }\n  const toastId = toast.loading('Đang tạo cặp khóa Dilithium...');\n  try {\n    // Thay đổi 1: Gọi đến buyerService thay vì signatureService, vì URL đã được sửa\n    // `/api/buyers/{userId}/create-digital-signature/`\n    const response = await buyerService.createDigitalSignature(user.id);\n    if (response.success) {\n      // --- BẮT ĐẦU PHẦN CẬP NHẬT GIAO DIỆN VÀ LƯU TRỮ ---\n\n      // Thay đổi 2: Lưu khóa bí mật vào localStorage\n      // Cảnh báo: Đây là cách lưu trữ đơn giản, trong thực tế cần mã hóa thêm\n      localStorage.setItem(`dilithium_private_key_${user.id}`, response.private_key);\n\n      // Thay đổi 3: Cập nhật state của user ngay lập tức để giao diện thay đổi\n      // Dữ liệu mới này được lấy từ chính response của API, không cần phải fetch lại\n      const updatedSignatureInfo = {\n        public_key: response.public_key,\n        signature_algorithm: 'CRYSTAL-DILITHIUM',\n        dilithium_variant: 'DILITHIUM3',\n        is_signature_verified: true,\n        // Giả định là đã xác minh thành công\n        quantum_resistant: true\n      };\n      setUser(prevUser => ({\n        ...prevUser,\n        ...updatedSignatureInfo\n      }));\n\n      // Cũng cập nhật lại formData để nếu người dùng có sửa thông tin khác thì không bị mất\n      setFormData(prevData => ({\n        ...prevData,\n        ...updatedSignatureInfo\n      }));\n\n      // Cập nhật lại user_data trong localStorage\n      const storedUserData = JSON.parse(localStorage.getItem('user_data'));\n      localStorage.setItem('user_data', JSON.stringify({\n        ...storedUserData,\n        ...updatedSignatureInfo\n      }));\n      toast.success('Tạo chữ ký số thành công! Khóa bí mật đã được lưu trữ an toàn trên trình duyệt của bạn.', {\n        id: toastId\n      });\n\n      // Hiển thị thông tin khóa trong modal\n      setSignatureData({\n        public_key: response.public_key\n      });\n      setShowSignatureModal(true);\n\n      // --- KẾT THÚC PHẦN CẬP NHẬT ---\n    } else {\n      // Nếu API trả về success: false\n      toast.error(response.message || 'Không thể tạo chữ ký số', {\n        id: toastId\n      });\n    }\n  } catch (error) {\n    toast.error(error.message || 'Đã xảy ra lỗi khi tạo chữ ký số', {\n      id: toastId\n    });\n  }\n};\n\n// ... (phần còn lại của component giữ nguyên)","map":{"version":3,"names":["handleGenerateSignature","window","confirm","toastId","toast","loading","response","buyerService","createDigitalSignature","user","id","success","localStorage","setItem","private_key","updatedSignatureInfo","public_key","signature_algorithm","dilithium_variant","is_signature_verified","quantum_resistant","setUser","prevUser","setFormData","prevData","storedUserData","JSON","parse","getItem","stringify","setSignatureData","setShowSignatureModal","error","message"],"sources":["D:/BaitapUIT/Mat_Ma_Hoc/new_final_project_clone/quantum-e-commerce/FE/src/pages/Profile/ProfilePage.jsx"],"sourcesContent":["// src/pages/Profile/ProfilePage.jsx\r\n\r\n// ... (các hàm và useEffect khác giữ nguyên)\r\n\r\n  const handleGenerateSignature = async () => {\r\n    // Hiển thị thông báo xác nhận để người dùng hiểu tầm quan trọng\r\n    if (!window.confirm('Bạn sắp tạo một cặp khóa chữ ký số mới. Khóa bí mật sẽ được lưu trên trình duyệt này. Bạn có muốn tiếp tục?')) {\r\n      return;\r\n    }\r\n\r\n    const toastId = toast.loading('Đang tạo cặp khóa Dilithium...');\r\n    \r\n    try {\r\n      // Thay đổi 1: Gọi đến buyerService thay vì signatureService, vì URL đã được sửa\r\n      // `/api/buyers/{userId}/create-digital-signature/`\r\n      const response = await buyerService.createDigitalSignature(user.id);\r\n\r\n      if (response.success) {\r\n        // --- BẮT ĐẦU PHẦN CẬP NHẬT GIAO DIỆN VÀ LƯU TRỮ ---\r\n\r\n        // Thay đổi 2: Lưu khóa bí mật vào localStorage\r\n        // Cảnh báo: Đây là cách lưu trữ đơn giản, trong thực tế cần mã hóa thêm\r\n        localStorage.setItem(`dilithium_private_key_${user.id}`, response.private_key);\r\n\r\n        // Thay đổi 3: Cập nhật state của user ngay lập tức để giao diện thay đổi\r\n        // Dữ liệu mới này được lấy từ chính response của API, không cần phải fetch lại\r\n        const updatedSignatureInfo = {\r\n          public_key: response.public_key,\r\n          signature_algorithm: 'CRYSTAL-DILITHIUM',\r\n          dilithium_variant: 'DILITHIUM3',\r\n          is_signature_verified: true, // Giả định là đã xác minh thành công\r\n          quantum_resistant: true,\r\n        };\r\n\r\n        setUser(prevUser => ({\r\n          ...prevUser,\r\n          ...updatedSignatureInfo\r\n        }));\r\n\r\n        // Cũng cập nhật lại formData để nếu người dùng có sửa thông tin khác thì không bị mất\r\n        setFormData(prevData => ({\r\n          ...prevData,\r\n          ...updatedSignatureInfo\r\n        }));\r\n        \r\n        // Cập nhật lại user_data trong localStorage\r\n        const storedUserData = JSON.parse(localStorage.getItem('user_data'));\r\n        localStorage.setItem('user_data', JSON.stringify({ ...storedUserData, ...updatedSignatureInfo }));\r\n\r\n        toast.success('Tạo chữ ký số thành công! Khóa bí mật đã được lưu trữ an toàn trên trình duyệt của bạn.', { id: toastId });\r\n        \r\n        // Hiển thị thông tin khóa trong modal\r\n        setSignatureData({ public_key: response.public_key });\r\n        setShowSignatureModal(true);\r\n        \r\n        // --- KẾT THÚC PHẦN CẬP NHẬT ---\r\n      } else {\r\n        // Nếu API trả về success: false\r\n        toast.error(response.message || 'Không thể tạo chữ ký số', { id: toastId });\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || 'Đã xảy ra lỗi khi tạo chữ ký số', { id: toastId });\r\n    }\r\n  };\r\n\r\n// ... (phần còn lại của component giữ nguyên)"],"mappings":"AAAA;;AAEA;;AAEE,MAAMA,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC1C;EACA,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,6GAA6G,CAAC,EAAE;IAClI;EACF;EAEA,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAAC,gCAAgC,CAAC;EAE/D,IAAI;IACF;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,YAAY,CAACC,sBAAsB,CAACC,IAAI,CAACC,EAAE,CAAC;IAEnE,IAAIJ,QAAQ,CAACK,OAAO,EAAE;MACpB;;MAEA;MACA;MACAC,YAAY,CAACC,OAAO,CAAC,yBAAyBJ,IAAI,CAACC,EAAE,EAAE,EAAEJ,QAAQ,CAACQ,WAAW,CAAC;;MAE9E;MACA;MACA,MAAMC,oBAAoB,GAAG;QAC3BC,UAAU,EAAEV,QAAQ,CAACU,UAAU;QAC/BC,mBAAmB,EAAE,mBAAmB;QACxCC,iBAAiB,EAAE,YAAY;QAC/BC,qBAAqB,EAAE,IAAI;QAAE;QAC7BC,iBAAiB,EAAE;MACrB,CAAC;MAEDC,OAAO,CAACC,QAAQ,KAAK;QACnB,GAAGA,QAAQ;QACX,GAAGP;MACL,CAAC,CAAC,CAAC;;MAEH;MACAQ,WAAW,CAACC,QAAQ,KAAK;QACvB,GAAGA,QAAQ;QACX,GAAGT;MACL,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMU,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACf,YAAY,CAACgB,OAAO,CAAC,WAAW,CAAC,CAAC;MACpEhB,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEa,IAAI,CAACG,SAAS,CAAC;QAAE,GAAGJ,cAAc;QAAE,GAAGV;MAAqB,CAAC,CAAC,CAAC;MAEjGX,KAAK,CAACO,OAAO,CAAC,yFAAyF,EAAE;QAAED,EAAE,EAAEP;MAAQ,CAAC,CAAC;;MAEzH;MACA2B,gBAAgB,CAAC;QAAEd,UAAU,EAAEV,QAAQ,CAACU;MAAW,CAAC,CAAC;MACrDe,qBAAqB,CAAC,IAAI,CAAC;;MAE3B;IACF,CAAC,MAAM;MACL;MACA3B,KAAK,CAAC4B,KAAK,CAAC1B,QAAQ,CAAC2B,OAAO,IAAI,yBAAyB,EAAE;QAAEvB,EAAE,EAAEP;MAAQ,CAAC,CAAC;IAC7E;EACF,CAAC,CAAC,OAAO6B,KAAK,EAAE;IACd5B,KAAK,CAAC4B,KAAK,CAACA,KAAK,CAACC,OAAO,IAAI,iCAAiC,EAAE;MAAEvB,EAAE,EAAEP;IAAQ,CAAC,CAAC;EAClF;AACF,CAAC;;AAEH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}