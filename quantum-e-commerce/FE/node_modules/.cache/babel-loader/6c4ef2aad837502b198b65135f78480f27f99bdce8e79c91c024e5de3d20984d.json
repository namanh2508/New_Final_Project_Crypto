{"ast":null,"code":"import apiClient from '../api/client';\nimport { API_ENDPOINTS } from '../api/endpoints';\nclass SignatureService {\n  // Tạo cặp khóa Dilithium\n  async generateKeypair() {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.GENERATE_KEYPAIR);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Ký tin nhắn\n  async signMessage(signatureData) {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.SIGN_MESSAGE, signatureData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Xác minh chữ ký\n  async verifySignature(verificationData) {\n    try {\n      const response = await apiClient.post(API_ENDPOINTS.VERIFY_SIGNATURE, verificationData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy log chữ ký\n  async getSignatureLogs(params = {}) {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.SIGNATURE_LOGS, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy thống kê chữ ký\n  async getSignatureStats() {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.SIGNATURE_LOGS}stats/`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy Certificate Authorities\n  async getCertificateAuthorities() {\n    try {\n      const response = await apiClient.get(API_ENDPOINTS.CERTIFICATE_AUTHORITIES);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Lấy CA hỗ trợ quantum-safe\n  async getQuantumSafeCAs() {\n    try {\n      const response = await apiClient.get(`${API_ENDPOINTS.CERTIFICATE_AUTHORITIES}quantum_safe/`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Ký đơn hàng (buyer)\n  async signOrder(orderId, message, privateKey) {\n    try {\n      const signatureData = {\n        entity_type: 'order',\n        entity_id: orderId,\n        message: message,\n        private_key: privateKey\n      };\n      return await this.signMessage(signatureData);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Ký thanh toán\n  async signPayment(paymentId, message, privateKey) {\n    try {\n      const signatureData = {\n        entity_type: 'payment',\n        entity_id: paymentId,\n        message: message,\n        private_key: privateKey\n      };\n      return await this.signMessage(signatureData);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  handleError(error) {\n    var _error$response;\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && _error$response.data) {\n      return {\n        message: error.response.data.message || 'Có lỗi xảy ra',\n        errors: error.response.data.errors || {},\n        status: error.response.status\n      };\n    }\n    return {\n      message: 'Lỗi kết nối mạng',\n      errors: {},\n      status: 0\n    };\n  }\n}\nexport default new SignatureService();","map":{"version":3,"names":["apiClient","API_ENDPOINTS","SignatureService","generateKeypair","response","post","GENERATE_KEYPAIR","data","error","handleError","signMessage","signatureData","SIGN_MESSAGE","verifySignature","verificationData","VERIFY_SIGNATURE","getSignatureLogs","params","get","SIGNATURE_LOGS","getSignatureStats","getCertificateAuthorities","CERTIFICATE_AUTHORITIES","getQuantumSafeCAs","signOrder","orderId","message","privateKey","entity_type","entity_id","private_key","signPayment","paymentId","_error$response","errors","status"],"sources":["D:/BaitapUIT/Mat_Ma_Hoc/new_final_project_clone/quantum-e-commerce/FE/src/services/signatureService.js"],"sourcesContent":["import apiClient from '../api/client';\r\nimport { API_ENDPOINTS } from '../api/endpoints';\r\n\r\nclass SignatureService {\r\n  // Tạo cặp khóa Dilithium\r\n  async generateKeypair() {\r\n    try {\r\n      const response = await apiClient.post(API_ENDPOINTS.GENERATE_KEYPAIR);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Ký tin nhắn\r\n  async signMessage(signatureData) {\r\n    try {\r\n      const response = await apiClient.post(API_ENDPOINTS.SIGN_MESSAGE, signatureData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Xác minh chữ ký\r\n  async verifySignature(verificationData) {\r\n    try {\r\n      const response = await apiClient.post(API_ENDPOINTS.VERIFY_SIGNATURE, verificationData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy log chữ ký\r\n  async getSignatureLogs(params = {}) {\r\n    try {\r\n      const response = await apiClient.get(API_ENDPOINTS.SIGNATURE_LOGS, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy thống kê chữ ký\r\n  async getSignatureStats() {\r\n    try {\r\n      const response = await apiClient.get(`${API_ENDPOINTS.SIGNATURE_LOGS}stats/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy Certificate Authorities\r\n  async getCertificateAuthorities() {\r\n    try {\r\n      const response = await apiClient.get(API_ENDPOINTS.CERTIFICATE_AUTHORITIES);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Lấy CA hỗ trợ quantum-safe\r\n  async getQuantumSafeCAs() {\r\n    try {\r\n      const response = await apiClient.get(`${API_ENDPOINTS.CERTIFICATE_AUTHORITIES}quantum_safe/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Ký đơn hàng (buyer)\r\n  async signOrder(orderId, message, privateKey) {\r\n    try {\r\n      const signatureData = {\r\n        entity_type: 'order',\r\n        entity_id: orderId,\r\n        message: message,\r\n        private_key: privateKey\r\n      };\r\n      return await this.signMessage(signatureData);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  // Ký thanh toán\r\n  async signPayment(paymentId, message, privateKey) {\r\n    try {\r\n      const signatureData = {\r\n        entity_type: 'payment',\r\n        entity_id: paymentId,\r\n        message: message,\r\n        private_key: privateKey\r\n      };\r\n      return await this.signMessage(signatureData);\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  handleError(error) {\r\n    if (error.response?.data) {\r\n      return {\r\n        message: error.response.data.message || 'Có lỗi xảy ra',\r\n        errors: error.response.data.errors || {},\r\n        status: error.response.status\r\n      };\r\n    }\r\n    return { message: 'Lỗi kết nối mạng', errors: {}, status: 0 };\r\n  }\r\n}\r\n\r\nexport default new SignatureService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}